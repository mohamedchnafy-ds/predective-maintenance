{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPtgNAHtLmI9PRvDQtputqm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# Importation des bibliothèques nécessaires\n","import numpy as np\n","import pandas as pd\n","from sklearn.ensemble import IsolationForest\n","from sklearn.preprocessing import StandardScaler\n","import joblib\n","import os"],"metadata":{"id":"_i1hu7h5Mj5z","executionInfo":{"status":"ok","timestamp":1741696891852,"user_tz":-60,"elapsed":19,"user":{"displayName":"Aaron Simon","userId":"00275679209075055609"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["class IsolationForestDetector:\n","    \"\"\"\n","    Classe pour la détection d'anomalies dans les données d'éoliennes\n","    en utilisant l'algorithme Isolation Forest.\n","    \"\"\"\n","\n","    def __init__(self, n_estimators=100, contamination='auto', random_state=42, max_samples='auto'):\n","        \"\"\"\n","        Initialisation du détecteur d'anomalies basé sur Isolation Forest\n","\n","        Args:\n","            n_estimators: Nombre d'arbres dans la forêt\n","            contamination: Proportion attendue d'anomalies dans le jeu de données\n","            random_state: Graine pour la reproductibilité\n","            max_samples: Nombre d'échantillons à utiliser pour construire chaque arbre\n","        \"\"\"\n","        self.model = IsolationForest(\n","            n_estimators=n_estimators,\n","            contamination=contamination,\n","            random_state=random_state,\n","            max_samples=max_samples,\n","            n_jobs=-1  # Utiliser tous les cœurs disponibles\n","        )\n","        self.scaler = StandardScaler()\n","        self.feature_columns = None\n","        self.threshold = None\n","\n","    def preprocess_data(self, data, feature_columns=None):\n","        \"\"\"\n","        Prétraite les données pour l'entraînement ou la prédiction\n","\n","        Args:\n","            data: DataFrame contenant les données\n","            feature_columns: Liste des colonnes à utiliser comme features\n","\n","        Returns:\n","            X: Données prétraitées\n","        \"\"\"\n","        if feature_columns is None:\n","            # Utiliser toutes les colonnes numériques sauf 'time_stamp' et 'status'\n","            feature_columns = [col for col in data.columns\n","                              if col not in ['time_stamp', 'status', 'train_test', 'status_id']\n","                              and np.issubdtype(data[col].dtype, np.number)]\n","\n","        self.feature_columns = feature_columns\n","        X = data[feature_columns].copy()\n","\n","        # Gestion des valeurs manquantes\n","        X.fillna(X.mean(), inplace=True)\n","\n","        # Normalisation des données\n","        X_scaled = self.scaler.fit_transform(X)\n","\n","        return X_scaled\n","\n","    def train(self, train_data, feature_columns=None):\n","        \"\"\"\n","        Entraîne le modèle Isolation Forest\n","\n","        Args:\n","            train_data: DataFrame contenant les données d'entraînement\n","            feature_columns: Liste des colonnes à utiliser comme features\n","        \"\"\"\n","        X_train = self.preprocess_data(train_data, feature_columns)\n","\n","        print(f\"Entraînement du modèle Isolation Forest avec {X_train.shape[1]} features...\")\n","        self.model.fit(X_train)\n","\n","        # Calcul des scores d'anomalie sur les données d'entraînement\n","        train_scores = self.model.decision_function(X_train)\n","\n","        # Par défaut, on considère comme anomalies les 5% des points avec les scores les plus bas\n","        self.threshold = np.percentile(train_scores, 5)\n","\n","        print(f\"Entraînement terminé. Seuil d'anomalie: {self.threshold:.4f}\")\n","\n","    def detect_anomalies(self, test_data):\n","        \"\"\"\n","        Détecte les anomalies dans les données de test\n","\n","        Args:\n","            test_data: DataFrame contenant les données de test\n","\n","        Returns:\n","            results: DataFrame avec les résultats de détection\n","        \"\"\"\n","        if self.feature_columns is None:\n","            raise ValueError(\"Le modèle doit être entraîné avant de détecter des anomalies.\")\n","\n","        # Prétraitement des données de test\n","        X_test = test_data[self.feature_columns].copy()\n","        X_test.fillna(X_test.mean(), inplace=True)\n","        X_test_scaled = self.scaler.transform(X_test)\n","\n","        # Calcul des scores d'anomalie\n","        anomaly_scores = self.model.decision_function(X_test_scaled)\n","\n","        # Prédiction des anomalies (1 pour normal, -1 pour anomalie selon scikit-learn)\n","        raw_predictions = self.model.predict(X_test_scaled)\n","\n","        # Conversion en format binaire (0 pour normal, 1 pour anomalie)\n","        anomaly_predictions = (raw_predictions == -1).astype(int)\n","\n","        # Création du DataFrame de résultats\n","        results = pd.DataFrame({\n","            'anomaly_score': anomaly_scores,\n","            'anomaly': anomaly_predictions\n","        })\n","\n","        # Ajout de la colonne time_stamp si elle existe dans les données de test\n","        if 'time_stamp' in test_data.columns:\n","            results['time_stamp'] = test_data['time_stamp'].values\n","\n","        return results\n","\n","    def save_model(self, model_path):\n","        \"\"\"\n","        Sauvegarde le modèle entraîné\n","\n","        Args:\n","            model_path: Chemin où sauvegarder le modèle\n","        \"\"\"\n","        os.makedirs(os.path.dirname(model_path), exist_ok=True)\n","\n","        model_data = {\n","            'model': self.model,\n","            'scaler': self.scaler,\n","            'feature_columns': self.feature_columns,\n","            'threshold': self.threshold\n","        }\n","\n","        joblib.dump(model_data, model_path)\n","        print(f\"Modèle sauvegardé à {model_path}\")\n","\n","    def load_model(self, model_path):\n","        \"\"\"\n","        Charge un modèle préalablement entraîné\n","\n","        Args:\n","            model_path: Chemin vers le modèle sauvegardé\n","        \"\"\"\n","        model_data = joblib.load(model_path)\n","\n","        self.model = model_data['model']\n","        self.scaler = model_data['scaler']\n","        self.feature_columns = model_data['feature_columns']\n","        self.threshold = model_data['threshold']\n","\n","        print(f\"Modèle chargé depuis {model_path}\")"],"metadata":{"id":"_jq2fmtHMrrV","executionInfo":{"status":"ok","timestamp":1741696892178,"user_tz":-60,"elapsed":3,"user":{"displayName":"Aaron Simon","userId":"00275679209075055609"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","execution_count":25,"metadata":{"id":"wppBfhl7L2fv","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"ok","timestamp":1741697312184,"user_tz":-60,"elapsed":37171,"user":{"displayName":"Aaron Simon","userId":"00275679209075055609"}},"outputId":"09a63e05-e56a-41af-d37b-67565796cff2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Entraînement du modèle Isolation Forest avec 81 features...\n","Entraînement terminé. Seuil d'anomalie: 0.0000\n","Modèle sauvegardé à /content/drive/MyDrive/GDM5 project/isolation_forest_model.pkl\n","Nombre d'anomalies détectées: 7157\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Exemple d'utilisation\n","def example_usage():\n","    # Chargement des données\n","    df = pd.read_parquet('/content/drive/MyDrive/GDM5 project/combined_data.parquet')\n","    #je veux créer une variable STATUS_ID qui vaut \"normal\" si la valeur de status_type_id vaut 0 ou 2 et \"not normal\" sinon\n","    df['status_id'] = np.where(df['status_type_id'].isin([0, 2]), 'normal', 'not normal')\n","\n","    # Sélection des colonnes de capteurs\n","    sensor_columns = [col for col in df.columns if any(x in col for x in\n","                        ['sensor', 'wind_speed', 'power'])]\n","\n","    # Préparation des jeux d'entraînement et de test\n","    train_data = df[(df['train_test'] == 'train') & (df['status_id'] == 'normal')]\n","    test_data = df[df['train_test'] == 'prediction']\n","\n","    # Création et entraînement du détecteur\n","    detector = IsolationForestDetector(n_estimators=150, contamination=0.05)\n","    detector.train(train_data, feature_columns=sensor_columns)\n","\n","    # Détection des anomalies\n","    anomaly_results = detector.detect_anomalies(test_data)\n","\n","    # Sauvegarde du modèle\n","    detector.save_model(\"/content/drive/MyDrive/GDM5 project/isolation_forest_model.pkl\")\n","\n","    # Affichage des résultats\n","    print(f\"Nombre d'anomalies détectées: {anomaly_results['anomaly'].sum()}\")\n","\n","    # Si les données de test contiennent des étiquettes réelles\n","    if 'status' in test_data.columns:\n","        from score_care import CAREScore\n","\n","        # Calcul du score CARE\n","        care_calculator = CAREScore()\n","        care_score, sub_scores = care_calculator.calculate_care(\n","            y_true=test_data['status'].values,\n","            y_pred=anomaly_results['anomaly'].values,\n","            timestamps=test_data['time_stamp'].values if 'time_stamp' in test_data.columns else None\n","        )\n","\n","        print(f\"\\nScore CARE: {care_score:.4f}\")\n","        print(\"Sous-scores:\")\n","        for name, score in sub_scores.items():\n","            print(f\"  {name}: {score:.4f}\")\n","\n","    import matplotlib.pyplot as plt\n","\n","    # Prétraitement des données de test pour obtenir X_test_scaled\n","    X_test_scaled = detector.preprocess_data(test_data, feature_columns=sensor_columns) #This line is added to define X_test_scaled\n","\n","    anomaly_scores = detector.model.decision_function(X_test_scaled)\n","\n","    plt.hist(anomaly_scores, bins=50)\n","    plt.title(\"Distribution des scores d'anomalie\")\n","    plt.xlabel(\"Score d'anomalie\")\n","    plt.ylabel(\"Fréquence\")\n","    plt.show()\n","if __name__ == \"__main__\":\n","    example_usage()"]},{"cell_type":"code","source":[],"metadata":{"id":"rdXzfwq0PFvw"},"execution_count":null,"outputs":[]}]}